import sys

"""
Протокол HTTP
HTTP (HyperText Transfer Protocol — протокол передачи гипертекста) — символьно-ориентированный 
клиент-серверный протокол прикладного уровня без сохранения состояния, используемый сервисом 
World Wide Web. Основным объектом манипуляции в HTTP является ресурс, на который указывает 
URI (Uniform Resource Identifier – уникальный идентификатор ресурса) в запросе клиента. 
Основными ресурсами являются хранящиеся на сервере файлы, но ими могут быть и другие логические 
(напр. каталог на сервере) или абстрактные объекты (напр. ISBN). Протокол HTTP позволяет указать 
способ представления (кодирования) одного и того же ресурса по различным параметрам: 
mime-типу, языку и т. д. Благодаря этой возможности клиент и веб-сервер могут обмениваться 
двоичными данными, хотя данный протокол является текстовым."""

"""Составляющие систем, основанных на HTTP
HTTP — это клиент-серверный протокол, то есть запросы отправляются какой-то одной стороной — 
участником обмена (user-agent) (либо прокси вместо него). Чаще всего в качестве участника выступает
веб-браузер, но им может быть кто угодно, например, робот, путешествующий по Сети для пополнения
и обновления данных индексации веб-страниц для поисковых систем.
Каждый запрос (англ. request) отправляется серверу, который обрабатывает его и возвращает ответ
(англ. response). Между этими запросами и ответами как правило существуют многочисленные
посредники, называемые прокси, которые выполняют различные операции и работают
как шлюзы или кэш, например.

Client server chain
Обычно между браузером и сервером гораздо больше различных устройств-посредников, которые играют
какую-либо роль в обработке запроса: маршрутизаторы, модемы и так далее. Благодаря тому, что Сеть
построена на основе системы уровней (слоёв) взаимодействия, эти посредники "спрятаны" на сетевом
и транспортном уровнях. В этой системе уровней HTTP занимает самый верхний уровень, который 
называется "прикладным" (или "уровнем приложений"). Знания об уровнях сети, таких как 
представительский, сеансовый, транспортный, сетевой, канальный и физический, имеют важное 
значение для понимания работы сети и диагностики возможных проблем, но не требуются для 
описания и понимания HTTP.

Клиент: участник обмена
Участник обмена (user agent) — это любой инструмент или устройство, действующие от лица 
пользователя. Эту задачу преимущественно выполняет веб-браузер; в некоторых случаях участниками 
выступают программы, которые используются инженерами и веб-разработчиками для отладки 
своих приложений. Браузер всегда является той сущностью, которая создаёт запрос. Сервер обычно 
этого не делает, хотя за многие годы существования сети были придуманы способы, которые могут
позволить выполнить запросы со стороны сервера. Чтобы отобразить веб страницу, браузер отправляет 
начальный запрос для получения HTML-документа этой страницы. После этого браузер изучает этот 
документ и запрашивает дополнительные файлы, необходимые для отображения содержания веб-страницы 
(исполняемые скрипты, информацию о макете страницы - CSS таблицы стилей, дополнительные ресурсы в 
виде изображений и видео-файлов), которые непосредственно являются частью исходного документа, 
но расположены в других местах сети. Далее браузер соединяет все эти ресурсы для отображения их 
пользователю в виде единого документа — веб-страницы. Скрипты, выполняемые самим браузером, могут 
получать по сети дополнительные ресурсы на последующих этапах обработки веб-страницы, и браузер 
соответствующим образом обновляет отображение этой страницы для пользователя.
Веб-страница является гипертекстовым документом. Это означает, что некоторые части отображаемого 
текста являются ссылками, которые могут быть активированы (обычно нажатием кнопки мыши) с целью 
получения и соответственно отображения новой веб-страницы (переход по ссылке). Это позволяет 
пользователю "перемещаться" по страницам сети (Internet). Браузер преобразует эти гиперссылки 
в HTTP-запросы и в дальнейшем полученные HTTP-ответы отображает в понятном для пользователя виде.

Веб-сервер
На другой стороне коммуникационного канала расположен сервер, который обслуживает (англ. serve) 
пользователя, предоставляя ему документы по запросу. С точки зрения конечного пользователя, сервер
всегда является некой одной виртуальной машиной, полностью или частично генерирующей документ, 
хотя фактически он может быть группой серверов, между которыми балансируется нагрузка, то есть 
перераспределяются запросы различных пользователей, либо сложным программным обеспечением, 
опрашивающим другие компьютеры (такие как кеширующие серверы, серверы баз данных, серверы 
приложений электронной коммерции и другие).
Сервер не обязательно расположен на одной машине, и наоборот - несколько серверов могут быть 
расположены (поститься) на одной и той же машине. В соответствии с версией HTTP/1.1 и имея
Host заголовок, они даже могут делить тот же самый IP-адрес.

Прокси
Между веб-браузером и сервером находятся большое количество сетевых узлов, передающих HTTP 
сообщения. Из-за слоистой структуры большинство из них оперируют также на транспортном сетевом 
или физическом уровнях, становясь прозрачным на HTTP слое и потенциально снижая производительность.
Эти операции на уровне приложений называются прокси. Они могут быть прозрачными или нет, 
(изменяющие запросы не пройдут через них), и способны исполнять множество функций:
- caching (кеш может быть публичным или приватными, как кеш браузера)
- фильтрация (как сканирование антивируса, родительский контроль, …)
- выравнивание нагрузки (позволить нескольким серверам обслуживать разные запросы)
- аутентификация (контролировать доступом к разным ресурсам)
- протоколирование (разрешение на хранение истории операций)
"""

"""
Структура протокола
Структура протокола определяет, что каждое HTTP-сообщение состоит из трёх частей 
(рисунок http_protocol.png), которые передаются в следующем порядке:
1) - Стартовая строка (англ. Starting line) — определяет тип сообщения;
2) - Заголовки (англ. Headers) — характеризуют тело сообщения, параметры передачи и прочие сведения;
3) - Тело сообщения (англ. Message Body) — непосредственно данные сообщения. Обязательно должно 
отделяться от заголовков пустой строкой."""

"""Стартовая строка HTTP
Cтартовая строка является обязательным элементом, так как указывает на тип запроса/ответа, 
заголовки и тело сообщения могут отсутствовать. 
Стартовые строки различаются для запроса и ответа. 
Строка запроса выглядит так: Метод URI HTTP/Версия протокола
                Метод /         URI               HTTP/Версия протокола
Пример запроса: GET   /web-programming/index.html HTTP/1.1

Стартовая строка ответа сервера имеет следующий формат: HTTP/Версия КодСостояния [Пояснение]
Например, на предыдущий наш запрос клиентом данной страницы сервер ответил строкой:
HTTP/Версия Код Состояния [Пояснение]
HTTP/1.1    200 Ok

Методы протокола
Метод HTTP (англ. HTTP Method) — последовательность из любых символов, кроме управляющих и 
разделителей, указывающая на основную операцию над ресурсом. Обычно метод представляет собой 
короткое английское слово, записанное заглавными буквами (show methods.png).
Названия метода чувствительны к регистру.
Каждый сервер обязан поддерживать как минимум методы GET и HEAD. Если сервер не распознал 
указанный клиентом метод, то он должен вернуть статус 501 (Not Implemented). Если серверу метод
известен, но он не применим к конкретному ресурсу, то возвращается сообщение с кодом 405 
(Method Not Allowed). В обоих случаях серверу следует включить в сообщение ответа заголовок 
Allow со списком поддерживаемых методов.
Наиболее востребованными являются методы GET и POST — на человеко-ориентированных ресурсах, 
POST — роботами поисковых машин и оффлайн-браузерами."""

"""
Прокси-сервер
Прокси - это транзитный сервер, перенаправляющий HTTP-трафик. Прокси-серверы используются для 
ускорения выполнения запросов путем кэширования веб-страниц. В локальной сети применяется как 
межсетевой экран и средство управления HTTP-трафиком (например, для блокирования доступа к 
некоторым ресурсам). В Интернете прокси часто используют для анонимизации запросов - в этом 
случае веб-сервер получает ip-адрес прокси-сервера, а не реального клиента. В современных 
браузерах можно задать целый список прокси и переключаться между серверами из этого списка по
мере необходимости (обычно такая возможность доступна через расширения или плагины браузера).
"""

"""Коды состояния
Код состояния информирует клиента о результатах выполнения запроса и определяет его дальнейшее
поведение. Набор кодов состояния является стандартом, и все они описаны в соответствующих
документах RFC. Каждый код представляется целым трехзначным числом. Первая цифра указывает на 
класс состояния, последующие - порядковый номер состояния (show status_codes.png). 
За кодом ответа обычно следует краткое описание на английском языке."""

"""Заголовки HTTP
Заголовок HTTP (HTTP Header) — это строка в HTTP-сообщении, содержащая разделённую двоеточием 
пару вида «параметр-значение». Формат заголовка соответствует общему формату заголовков текстовых
сетевых сообщений ARPA (RFC 822). Как правило, браузер и веб-сервер включают в сообщения более 
чем по одному заголовку. Заголовки должны отправляться раньше тела сообщения и отделяться от него
 хотя бы одной пустой строкой (CRLF).
Название параметра должно состоять минимум из одного печатного символа (ASCII-коды от 33 до 126). 
После названия сразу должен следовать символ двоеточия. Значение может содержать любые 
символы ASCII, кроме перевода строки (CR, код 10) и возврата каретки (LF, код 13).
Пробельные символы в начале и конце значения обрезаются. Последовательность нескольких пробельных
символов внутри значения может восприниматься как один пробел. Регистр символов в названии и 
значении не имеет значения (если иное не предусмотрено форматом поля).
Пример заголовков ответа сервера:"""
# HTTP/1.1 200 OK
# Content-Encoding: gzip
# Accept-Ranges: bytes
# Age: 359729
# Cache-Control: max-age=604800
# Content-Type: text/html; charset=UTF-8
# Date: Mon, 24 Oct 2022 07:41:07 GMT
# Etag: "3147526947"
# Expires: Mon, 31 Oct 2022 07:41:07 GMT
# Last-Modified: Thu, 17 Oct 2019 07:18:26 GMT
# Server: ECS (bsa/EB18)
# X-Cache: HIT
# Content-Length: 648
"""Все HTTP-заголовки разделяются на четыре основных группы:
- General Headers (Основные заголовки) — должны включаться в любое сообщение клиента и сервера.
- Request Headers (Заголовки запроса) — используются только в запросах клиента.
- Response Headers (Заголовки ответа) — присутствуют только в ответах сервера.
- Entity Headers (Заголовки сущности) — сопровождают каждую сущность сообщения.
Сущности (entity, в переводах также встречается название “объект”) — это полезная информация, 
передаваемая в запросе или ответе. Сущность состоит из метаинформации (заголовки) и 
непосредственно содержания (тело сообщения).
В отдельный класс заголовки сущности выделены, чтобы не путать их с заголовками запроса или 
заголовками ответа при передаче множественного содержимого (multipart/*). Заголовки запроса и 
ответа, как и основные заголовки, описывают всё сообщение в целом и размещаются только в
начальном блоке заголовков, в то время как заголовки сущности характеризуют содержимое каждой 
части в отдельности, располагаясь непосредственно перед её телом. В HTTP_Header.png приведено 
краткое описание некоторых HTTP-заголовков."""








